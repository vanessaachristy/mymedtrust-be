/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace MainContract {
  export type UserStruct = {
    addr: string;
    IC: string;
    name: string;
    gender: string;
    birthdate: string;
    email: string;
    homeAddress: string;
    phone: string;
    userSince: BigNumberish;
  };

  export type UserStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber
  ] & {
    addr: string;
    IC: string;
    name: string;
    gender: string;
    birthdate: string;
    email: string;
    homeAddress: string;
    phone: string;
    userSince: BigNumber;
  };

  export type PatientStruct = {
    primaryInfo: MainContract.UserStruct;
    emergencyContact: string;
    emergencyNumber: string;
    bloodType: string;
    height: string;
    weight: string;
    whitelistedDoctor: string[];
    recordList: string[];
  };

  export type PatientStructOutput = [
    MainContract.UserStructOutput,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    primaryInfo: MainContract.UserStructOutput;
    emergencyContact: string;
    emergencyNumber: string;
    bloodType: string;
    height: string;
    weight: string;
    whitelistedDoctor: string[];
    recordList: string[];
  };

  export type DoctorStruct = {
    primaryInfo: MainContract.UserStruct;
    qualification: string;
    major: string;
  };

  export type DoctorStructOutput = [
    MainContract.UserStructOutput,
    string,
    string
  ] & {
    primaryInfo: MainContract.UserStructOutput;
    qualification: string;
    major: string;
  };
}

export interface MainContractInterface extends utils.Interface {
  functions: {
    "doctorList(address)": FunctionFragment;
    "doctors(uint256)": FunctionFragment;
    "patientList(address)": FunctionFragment;
    "patients(uint256)": FunctionFragment;
    "totalDoctors()": FunctionFragment;
    "totalPatients()": FunctionFragment;
    "createPatient((address,string,string,string,string,string,string,string,uint256),string,string,string,string,string,address[],string[])": FunctionFragment;
    "setPatientDetails((address,string,string,string,string,string,string,string,uint256),string,string,string,string,string,address[],string[])": FunctionFragment;
    "addWhitelistedDoctor(address,address)": FunctionFragment;
    "removeWhitelistedDoctor(address,address)": FunctionFragment;
    "getPatientDetails(address)": FunctionFragment;
    "createDoctor((address,string,string,string,string,string,string,string,uint256),string,string)": FunctionFragment;
    "setDoctorDetails((address,string,string,string,string,string,string,string,uint256),string,string)": FunctionFragment;
    "getDoctorDetails(address)": FunctionFragment;
    "createRecord(string,address)": FunctionFragment;
    "removeRecord(string,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "doctorList"
      | "doctors"
      | "patientList"
      | "patients"
      | "totalDoctors"
      | "totalPatients"
      | "createPatient"
      | "setPatientDetails"
      | "addWhitelistedDoctor"
      | "removeWhitelistedDoctor"
      | "getPatientDetails"
      | "createDoctor"
      | "setDoctorDetails"
      | "getDoctorDetails"
      | "createRecord"
      | "removeRecord"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "doctorList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "doctors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "patientList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "patients",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDoctors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPatients",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPatient",
    values: [
      MainContract.UserStruct,
      string,
      string,
      string,
      string,
      string,
      string[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPatientDetails",
    values: [
      MainContract.UserStruct,
      string,
      string,
      string,
      string,
      string,
      string[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedDoctor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedDoctor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createDoctor",
    values: [MainContract.UserStruct, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDoctorDetails",
    values: [MainContract.UserStruct, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDoctorDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createRecord",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRecord",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "doctorList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doctors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "patientList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "patients", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDoctors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPatients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPatientDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDoctorDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDoctorDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRecord",
    data: BytesLike
  ): Result;

  events: {
    "DoctorCreated(address,string,string,uint256)": EventFragment;
    "PatientCreated(address,string,string,uint256)": EventFragment;
    "WhitelistDoctor(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DoctorCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PatientCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistDoctor"): EventFragment;
}

export interface DoctorCreatedEventObject {
  doctorAddr: string;
  doctorName: string;
  doctorIC: string;
  timestamp: BigNumber;
}
export type DoctorCreatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  DoctorCreatedEventObject
>;

export type DoctorCreatedEventFilter = TypedEventFilter<DoctorCreatedEvent>;

export interface PatientCreatedEventObject {
  patientAddr: string;
  patientName: string;
  patientIC: string;
  timestamp: BigNumber;
}
export type PatientCreatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  PatientCreatedEventObject
>;

export type PatientCreatedEventFilter = TypedEventFilter<PatientCreatedEvent>;

export interface WhitelistDoctorEventObject {
  patientAddr: string;
  doctorAddr: string;
  timestamp: BigNumber;
}
export type WhitelistDoctorEvent = TypedEvent<
  [string, string, BigNumber],
  WhitelistDoctorEventObject
>;

export type WhitelistDoctorEventFilter = TypedEventFilter<WhitelistDoctorEvent>;

export interface MainContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MainContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    doctorList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [MainContract.UserStructOutput, string, string] & {
        primaryInfo: MainContract.UserStructOutput;
        qualification: string;
        major: string;
      }
    >;

    doctors(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    patientList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        MainContract.UserStructOutput,
        string,
        string,
        string,
        string,
        string
      ] & {
        primaryInfo: MainContract.UserStructOutput;
        emergencyContact: string;
        emergencyNumber: string;
        bloodType: string;
        height: string;
        weight: string;
      }
    >;

    patients(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalDoctors(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPatients(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPatient(
      userInfo: MainContract.UserStruct,
      _emergencyContact: string,
      _emergencyNumber: string,
      _bloodType: string,
      _height: string,
      _weight: string,
      _whitelistedDoctor: string[],
      _recordList: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPatientDetails(
      userInfo: MainContract.UserStruct,
      _emergencyContact: string,
      _emergencyNumber: string,
      _bloodType: string,
      _height: string,
      _weight: string,
      _whitelistedDoctor: string[],
      _recordList: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addWhitelistedDoctor(
      doctorAddress: string,
      patientAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeWhitelistedDoctor(
      doctorAddress: string,
      patientAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPatientDetails(
      patientAddress: string,
      overrides?: CallOverrides
    ): Promise<[MainContract.PatientStructOutput]>;

    createDoctor(
      userInfo: MainContract.UserStruct,
      _qualification: string,
      _major: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDoctorDetails(
      userInfo: MainContract.UserStruct,
      _qualification: string,
      _major: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getDoctorDetails(
      doctorAddress: string,
      overrides?: CallOverrides
    ): Promise<[MainContract.DoctorStructOutput]>;

    createRecord(
      _encryptedID: string,
      _patientAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeRecord(
      _encryptedID: string,
      _patientAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  doctorList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [MainContract.UserStructOutput, string, string] & {
      primaryInfo: MainContract.UserStructOutput;
      qualification: string;
      major: string;
    }
  >;

  doctors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  patientList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [MainContract.UserStructOutput, string, string, string, string, string] & {
      primaryInfo: MainContract.UserStructOutput;
      emergencyContact: string;
      emergencyNumber: string;
      bloodType: string;
      height: string;
      weight: string;
    }
  >;

  patients(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalDoctors(overrides?: CallOverrides): Promise<BigNumber>;

  totalPatients(overrides?: CallOverrides): Promise<BigNumber>;

  createPatient(
    userInfo: MainContract.UserStruct,
    _emergencyContact: string,
    _emergencyNumber: string,
    _bloodType: string,
    _height: string,
    _weight: string,
    _whitelistedDoctor: string[],
    _recordList: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPatientDetails(
    userInfo: MainContract.UserStruct,
    _emergencyContact: string,
    _emergencyNumber: string,
    _bloodType: string,
    _height: string,
    _weight: string,
    _whitelistedDoctor: string[],
    _recordList: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addWhitelistedDoctor(
    doctorAddress: string,
    patientAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeWhitelistedDoctor(
    doctorAddress: string,
    patientAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPatientDetails(
    patientAddress: string,
    overrides?: CallOverrides
  ): Promise<MainContract.PatientStructOutput>;

  createDoctor(
    userInfo: MainContract.UserStruct,
    _qualification: string,
    _major: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDoctorDetails(
    userInfo: MainContract.UserStruct,
    _qualification: string,
    _major: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getDoctorDetails(
    doctorAddress: string,
    overrides?: CallOverrides
  ): Promise<MainContract.DoctorStructOutput>;

  createRecord(
    _encryptedID: string,
    _patientAddr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeRecord(
    _encryptedID: string,
    _patientAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    doctorList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [MainContract.UserStructOutput, string, string] & {
        primaryInfo: MainContract.UserStructOutput;
        qualification: string;
        major: string;
      }
    >;

    doctors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    patientList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        MainContract.UserStructOutput,
        string,
        string,
        string,
        string,
        string
      ] & {
        primaryInfo: MainContract.UserStructOutput;
        emergencyContact: string;
        emergencyNumber: string;
        bloodType: string;
        height: string;
        weight: string;
      }
    >;

    patients(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalDoctors(overrides?: CallOverrides): Promise<BigNumber>;

    totalPatients(overrides?: CallOverrides): Promise<BigNumber>;

    createPatient(
      userInfo: MainContract.UserStruct,
      _emergencyContact: string,
      _emergencyNumber: string,
      _bloodType: string,
      _height: string,
      _weight: string,
      _whitelistedDoctor: string[],
      _recordList: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPatientDetails(
      userInfo: MainContract.UserStruct,
      _emergencyContact: string,
      _emergencyNumber: string,
      _bloodType: string,
      _height: string,
      _weight: string,
      _whitelistedDoctor: string[],
      _recordList: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addWhitelistedDoctor(
      doctorAddress: string,
      patientAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWhitelistedDoctor(
      doctorAddress: string,
      patientAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPatientDetails(
      patientAddress: string,
      overrides?: CallOverrides
    ): Promise<MainContract.PatientStructOutput>;

    createDoctor(
      userInfo: MainContract.UserStruct,
      _qualification: string,
      _major: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDoctorDetails(
      userInfo: MainContract.UserStruct,
      _qualification: string,
      _major: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getDoctorDetails(
      doctorAddress: string,
      overrides?: CallOverrides
    ): Promise<MainContract.DoctorStructOutput>;

    createRecord(
      _encryptedID: string,
      _patientAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRecord(
      _encryptedID: string,
      _patientAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DoctorCreated(address,string,string,uint256)"(
      doctorAddr?: null,
      doctorName?: null,
      doctorIC?: null,
      timestamp?: null
    ): DoctorCreatedEventFilter;
    DoctorCreated(
      doctorAddr?: null,
      doctorName?: null,
      doctorIC?: null,
      timestamp?: null
    ): DoctorCreatedEventFilter;

    "PatientCreated(address,string,string,uint256)"(
      patientAddr?: null,
      patientName?: null,
      patientIC?: null,
      timestamp?: null
    ): PatientCreatedEventFilter;
    PatientCreated(
      patientAddr?: null,
      patientName?: null,
      patientIC?: null,
      timestamp?: null
    ): PatientCreatedEventFilter;

    "WhitelistDoctor(address,address,uint256)"(
      patientAddr?: null,
      doctorAddr?: null,
      timestamp?: null
    ): WhitelistDoctorEventFilter;
    WhitelistDoctor(
      patientAddr?: null,
      doctorAddr?: null,
      timestamp?: null
    ): WhitelistDoctorEventFilter;
  };

  estimateGas: {
    doctorList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    doctors(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    patientList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    patients(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalDoctors(overrides?: CallOverrides): Promise<BigNumber>;

    totalPatients(overrides?: CallOverrides): Promise<BigNumber>;

    createPatient(
      userInfo: MainContract.UserStruct,
      _emergencyContact: string,
      _emergencyNumber: string,
      _bloodType: string,
      _height: string,
      _weight: string,
      _whitelistedDoctor: string[],
      _recordList: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPatientDetails(
      userInfo: MainContract.UserStruct,
      _emergencyContact: string,
      _emergencyNumber: string,
      _bloodType: string,
      _height: string,
      _weight: string,
      _whitelistedDoctor: string[],
      _recordList: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addWhitelistedDoctor(
      doctorAddress: string,
      patientAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeWhitelistedDoctor(
      doctorAddress: string,
      patientAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPatientDetails(
      patientAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDoctor(
      userInfo: MainContract.UserStruct,
      _qualification: string,
      _major: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDoctorDetails(
      userInfo: MainContract.UserStruct,
      _qualification: string,
      _major: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getDoctorDetails(
      doctorAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createRecord(
      _encryptedID: string,
      _patientAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeRecord(
      _encryptedID: string,
      _patientAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    doctorList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doctors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    patientList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    patients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDoctors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPatients(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPatient(
      userInfo: MainContract.UserStruct,
      _emergencyContact: string,
      _emergencyNumber: string,
      _bloodType: string,
      _height: string,
      _weight: string,
      _whitelistedDoctor: string[],
      _recordList: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPatientDetails(
      userInfo: MainContract.UserStruct,
      _emergencyContact: string,
      _emergencyNumber: string,
      _bloodType: string,
      _height: string,
      _weight: string,
      _whitelistedDoctor: string[],
      _recordList: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addWhitelistedDoctor(
      doctorAddress: string,
      patientAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeWhitelistedDoctor(
      doctorAddress: string,
      patientAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPatientDetails(
      patientAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createDoctor(
      userInfo: MainContract.UserStruct,
      _qualification: string,
      _major: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDoctorDetails(
      userInfo: MainContract.UserStruct,
      _qualification: string,
      _major: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getDoctorDetails(
      doctorAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createRecord(
      _encryptedID: string,
      _patientAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeRecord(
      _encryptedID: string,
      _patientAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
