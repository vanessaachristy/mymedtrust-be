/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace RecordContract {
  export type RecordStruct = {
    encryptedID: string;
    dataHash: string;
    issuerDoctorAddr: string;
    patientAddr: string;
    timestamp: BigNumberish;
    recordStatus: BigNumberish;
  };

  export type RecordStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    number
  ] & {
    encryptedID: string;
    dataHash: string;
    issuerDoctorAddr: string;
    patientAddr: string;
    timestamp: BigNumber;
    recordStatus: number;
  };
}

export interface RecordContractInterface extends utils.Interface {
  functions: {
    "recordList(string)": FunctionFragment;
    "createRecord(string,string,address,address)": FunctionFragment;
    "editRecord(string,string,uint8)": FunctionFragment;
    "getRecordDetails(string)": FunctionFragment;
    "removeRecord(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "recordList"
      | "createRecord"
      | "editRecord"
      | "getRecordDetails"
      | "removeRecord"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "recordList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createRecord",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "editRecord",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecordDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRecord",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "recordList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecordDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRecord",
    data: BytesLike
  ): Result;

  events: {
    "RecordCreated(string,string,address,uint256,uint8,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RecordCreated"): EventFragment;
}

export interface RecordCreatedEventObject {
  encryptedID: string;
  dataHash: string;
  issuerDoctorAddr: string;
  timestamp: BigNumber;
  recordStatus: number;
  patientAddr: string;
}
export type RecordCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, number, string],
  RecordCreatedEventObject
>;

export type RecordCreatedEventFilter = TypedEventFilter<RecordCreatedEvent>;

export interface RecordContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RecordContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    recordList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, number] & {
        encryptedID: string;
        dataHash: string;
        issuerDoctorAddr: string;
        patientAddr: string;
        timestamp: BigNumber;
        recordStatus: number;
      }
    >;

    createRecord(
      _encryptedID: string,
      _dataHash: string,
      _issuerDoctorAddr: string,
      _patientAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    editRecord(
      _encryptedID: string,
      _dataHash: string,
      _recordStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRecordDetails(
      _encryptedID: string,
      overrides?: CallOverrides
    ): Promise<[RecordContract.RecordStructOutput]>;

    removeRecord(
      _encryptedID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  recordList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, number] & {
      encryptedID: string;
      dataHash: string;
      issuerDoctorAddr: string;
      patientAddr: string;
      timestamp: BigNumber;
      recordStatus: number;
    }
  >;

  createRecord(
    _encryptedID: string,
    _dataHash: string,
    _issuerDoctorAddr: string,
    _patientAddr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  editRecord(
    _encryptedID: string,
    _dataHash: string,
    _recordStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRecordDetails(
    _encryptedID: string,
    overrides?: CallOverrides
  ): Promise<RecordContract.RecordStructOutput>;

  removeRecord(
    _encryptedID: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    recordList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, number] & {
        encryptedID: string;
        dataHash: string;
        issuerDoctorAddr: string;
        patientAddr: string;
        timestamp: BigNumber;
        recordStatus: number;
      }
    >;

    createRecord(
      _encryptedID: string,
      _dataHash: string,
      _issuerDoctorAddr: string,
      _patientAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    editRecord(
      _encryptedID: string,
      _dataHash: string,
      _recordStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRecordDetails(
      _encryptedID: string,
      overrides?: CallOverrides
    ): Promise<RecordContract.RecordStructOutput>;

    removeRecord(
      _encryptedID: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RecordCreated(string,string,address,uint256,uint8,address)"(
      encryptedID?: null,
      dataHash?: null,
      issuerDoctorAddr?: null,
      timestamp?: null,
      recordStatus?: null,
      patientAddr?: null
    ): RecordCreatedEventFilter;
    RecordCreated(
      encryptedID?: null,
      dataHash?: null,
      issuerDoctorAddr?: null,
      timestamp?: null,
      recordStatus?: null,
      patientAddr?: null
    ): RecordCreatedEventFilter;
  };

  estimateGas: {
    recordList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    createRecord(
      _encryptedID: string,
      _dataHash: string,
      _issuerDoctorAddr: string,
      _patientAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    editRecord(
      _encryptedID: string,
      _dataHash: string,
      _recordStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRecordDetails(
      _encryptedID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeRecord(
      _encryptedID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    recordList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createRecord(
      _encryptedID: string,
      _dataHash: string,
      _issuerDoctorAddr: string,
      _patientAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    editRecord(
      _encryptedID: string,
      _dataHash: string,
      _recordStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRecordDetails(
      _encryptedID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeRecord(
      _encryptedID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
